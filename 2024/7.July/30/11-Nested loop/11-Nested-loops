// // https://docs.google.com/document/d/1yB6ErFdyjXWh7INfikVXyVpZ5sTM-htDnYth5FXK0sM/edit?usp=sharing

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Exercise 1: Star Pattern
// Objective: Create a program that prints a right triangle pattern of stars (*).
// Instructions:
// Use two nested loops. The outer loop should iterate through numbers 1 to 5 (representing the row number).
// The inner loop should print stars equal to the current row number.
// Each row should end with a new line.
// Example Output:
// *
// **
// ***
// ****
// *****

function triangleOfAsterisks(numOfRow) {
  // Create a variable that contain the result
  let triangle = "";
  // nested loops that add `*` i times.
  for (let i = 1; i <= numOfRow; i++) {
    for (let j = 1; j <= i; j++) {
      triangle += "*  ";
    }
    // Going down a row
    triangle += "\n";
  }
  return triangle;
}
/*
console.log(triangleOfAsterisks(5));
/* Output:
 *
 *  *
 *  *  *
 *  *  *  *
 *  *  *  *  *
 */

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Exercise 2: Multiplication Table
// Objective: Write a program that prints a multiplication table for numbers 1 through 5.
// Instructions:
// Use two nested for loops. The outer loop should iterate through numbers 1 to 5.
// The inner loop should also iterate through numbers 1 to 5.
// Multiply the numbers from the outer and inner loops and print the result.
// Example Output:
// Copy code
// 1 2 3 4 5
// 2 4 6 8 10
// 3 6 9 12 15
// 4 8 12 16 20
// 5 10 15 20 25

function multiplyTable(numOfRow) {
  // create a variable that contain the values
  let table = "";
  // create a loop that add to `table` the result of the multiply of the index of the row and column
  for (let i = 1; i <= numOfRow; i++) {
    for (let j = 1; j <= numOfRow; j++) {
      table += `${i * j} `;
    }
    //Going down a row
    table += `\n`;
  }
  return table;
}

/*
console.log(multiplyTable(5));
/* Output:
1 2 3 4 5 
2 4 6 8 10 
3 6 9 12 15 
4 8 12 16 20 
5 10 15 20 25 

// */

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Exercise 3: Array Search
// Objective: Find a specific number in a 2D array and print its position.
// Instructions:
// Create a 2D array (e.g., let arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];).
// Use two nested loops to iterate over the elements of the array.
// Check each element to see if it matches the target number.
// If the target number is found, print its position (row and column).
// Example Output:
// For target = 5, output: Found 5 at position (1, 1)
// For target = 7, output: Found 7 at position (2, 0)

// create a 2D array
let array = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9],
];

function findNumInArr(arr, num) {
  // create a variable that contain the location of the num in the array
  let numLocation;
  for (let i = 0; i < arr.length; i++) {
    for (let j = 0; j < arr[i].length; j++) {
      // compere if the num equal to array's in specific index
      if (num === arr[i][j]) {
        numLocation = `${i}, ${j}`;
        break;
      }
    }
    //  compere if already found the location and break the loop
    if (numLocation !== undefined) break;
  }
  return `Found ${num} at position (${numLocation})`;
}

/*
console.log(findNumInArr(array, 5)); 
/* Output:
Found 5 at position (1, 1)
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Exercise 4: Count Vowels and Consonants
// Objective: Write a program to count the number of vowels and consonants in a given string.
// Instructions:
// Take a string as input.
// Use a loop to iterate over each character in the string.
// Use another loop (or a set of conditions) to check if the character is a vowel or consonant.
// Keep a count of vowels
// For simplicity, strings should contain only letters.
//  let vowels = "aeiouAEIOU";
// Example Output:
// For input = "hello", output: Vowels: 2
// For input = "world", output: Vowels: 1
//
function countChar(string, char) {
  // Create a variable that count how many letter exists from some value
  let count = 0;
  // loop that Compere every letter in the string to
  for (let i = 0; i < string.length; i++) {
    if (char === string[i]) {
      // adding to the counter if there is a match
      count++;
    }
  }

  return `count of ${char}: ${count} in ${string}`;
}
// /*
console.log(countChar("hello", "l"));

/* Output:
count of l: 2 in hello
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// count the char in a strings array (Verbose)
function countCharInArrayVerbose(elements, char) {
  let count = 0;

  for (let i = 0; i < elements.length; i++) {
    let currentElement = elements[i];

    for (let j = 0; j < currentElement.length; j++) {
      let currentChar = currentElement[j];
      if (char === currentChar) {
        count++;
      }
    }
  }

  console.log(`count of ${char}: ${count}`);
}

// count the char in a strings array
function countCharInArray(elements, char) {
  let count = 0;
  for (let i = 0; i < elements.length; i++) {
    for (let j = 0; j < elements[i].length; j++) {
      if (char === elements[i][j]) {
        count++;
      }
    }
  }

  console.log(`count of ${char}: ${count}`);
}

let names = ["sasha", "omer", "sason", "shai"];
countCharInArray(names, "s");
countCharInArray(names, "a");
countCharInArray(names, "b");

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Exercise 5: Reverse a String
// Objective: Write a program that reverses a given string using nested loops.
// Instructions:
// Take a string as input.
// Use a loop to iterate over each character in the string.
// Use a nested loop to reverse the string by iterating from the end to the beginning.
// Example Output:
// For input = "hello", output: olleh
// For input = "world", output: dlrow
//
function reverseString(string) {
  // create a variable that contain the result
  let reverseStr = " ";
  for (let i = string.length - 1; i >= 0; i--) {
    // add to the variable the value un the i index of string
    reverseStr += string[i];
  }
  return reverseStr;
}
/*
console.log(reverseString("Haviv"));
/*
 Output:
vivaH
 */

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Exercise 6: Number Pyramid
// Objective: Create a program that prints a number pyramid.
// Instructions:
// Use nested loops to print a pyramid of numbers.
// The outer loop should iterate through the number of rows (e.g., 5).
// The inner loop should print numbers from 1 up to the current row number.
// Example Output:
// 1
// 12
// 123
// 1234
// 12345

function numberPyramid(numberOfRow) {
  let currentNumber = " ";
  for (let i = 1; i <= numberOfRow; i++) {
    for (let j = 1; j <= i; j++) {
      currentNumber += j.toString();
      if (j === i) {
        currentNumber += "\n";
      }
    }
  }
  return currentNumber;
}
/*
console.log(numberPyramid(7));
/*
Output:
1
12
123
1234
12345
123456
1234567
// */

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Exercise 7: Sum of 2D Array Elements
// Objective: Calculate the sum of all elements in a 2D array.
// Instructions:
// Create a 2D array with numbers.
// Use nested loops to iterate over each element.
// Sum all the elements and print the total.
//
//
// Create a 2D array with numbers.
let arr = [
  [1, 2],
  [3, 4],
  [5, 6],
  [7, 8],
];
function sumOf2DArr(array) {
  // variable that contain the sum
  let sum = null;
  // variable that contain the current array that check
  let currentArray;
  for (let i = 0; i < array.length; i++) {
    currentArray = array[i];
    for (let j = 0; j < currentArray.length; j++) {
      // adding the specific value to the sum variable
      sum += currentArray[j];
    }
  }
  return sum;
}
console.log(sumOf2DArr(arr));
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Exercise 8: Character Frequency (bonus, require objects)
// Objective: Write a program to find the frequency of each character in a string.
// Instructions:
// Take a string as input.
// Use nested loops to count the frequency of each character.
// Print each character and its frequency.
// Example Output:
// For input = "hello", output: h: 1, e: 1, l: 2, o: 1

function countFreq(str) {
  // create object that contains the letters
  let freqObject = {};
  for (let i = 0; i < str.length; i++) {
    if (!freqObject[str[i]])
      // check if letter is already exists and checked.
      for (let j = 0; j < str.length; j++) {
        if (str[i] === str[j]) {
          // if the letter no exists i create her key in the object and defined her as 1
          if (!freqObject[str[i]]) {
            freqObject[str[i]] = 1;
            //  if the letter already i increase the counter by 1.
          } else freqObject[str[i]] += 1;
        }
      }
  }
  return freqObject;
}
// /*
console.log(countFreq("heello"));
/* 
Output:
{h: 1, e: 2, l: 2, o: 1}
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Exercise 9: Flatten a 2D Array
// Objective: Convert a 2D array into a 1D array.
// Instructions:
// Create a 2D array with some numbers.
// Use nested loops to iterate over each element.
// Store all elements in a new 1D array and print the result.
// Example Output:
// For arr = [[1, 2], [3, 4], [5, 6]], output: [1, 2, 3, 4, 5, 6]

function new1DArr(array) {
  let newArray = [];
  let currentArray;
  for (let i = 0; i < array.length; i++) {
    currentArray = array[i];
    for (let j = 0; j < currentArray.length; j++) {
      newArray.push(currentArray[j]);
    }
  }
  return newArray;
}
let array1 = [
  [1, 2],
  [3, 4],
  [5, 6],
  [7, 8],
];
/*
console.log(new1DArr(array1));
/*
Output:
[1, 2, 3, 4, 5, 6, 7, 8] (8)
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Exercise 10: Matrix Transpose
// Objective: Transpose a given matrix.
// Instructions:
// Create a 2D array representing a matrix.
// Use nested loops to switch the rows and columns of the matrix.
// Print the transposed matrix.
// Example Output:
// For matrix = [[1, 2, 3], [4, 5, 6]], output: [[1, 4], [2, 5], [3, 6]]

let matrix = [
  [1, 2, 3],
  [4, 5, 6],
];

function makeNewMatrix(matrix) {
  // create a variables that contain the lengths of the arrays.
  let rows = matrix.length;
  let cols = matrix[0].length;
  // create a variables that contain the result arrays.
  let newMatrix = [];

  for (let i = 0; i < cols; i++) {
    newMatrix[i] = [];
    for (let j = 0; j < rows; j++) {
      newMatrix[i][j] = matrix[j][i];
    }
  }
  return newMatrix;
}
// /*
console.log(makeNewMatrix(matrix));
/*
Output:
[[1, 4], [2, 5], [3, 6]] (3)
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Exercise 11: Palindrome Check
//  Objective: Check if a given string is a palindrome.
// Instructions:
// Take a string as input.
// Use nested loops to compare characters from the beginning and end of the string.
// Print whether the string is a palindrome.
// Example Output:
// For input = "radar", output: Palindrome
// For input = "hello", output: Not a palindrome

function checkPali(string) {
  let numOfCheck = Math.floor(string.length / 2);
  for (let i = 0; i < numOfCheck; i++)
    if (string[i] !== string[string.length - i - 1]) {
      console.log("Not a palindrome");
      break;
    } else if (i === numOfCheck - 1) console.log("Palindrome");
}
/*
checkPali("haviv");
/*
Output:
Not a palindrome
*/

function checkPali(string) {
  let numOfCheck = Math.floor(string.length / 2);
  for (let i = 0; i < 1; i++) {
    for (let j = string.length - 1 - i; j > numOfCheck; j--) {
      if (string[string.length - j - 1] !== string[j]) {
        console.log("Not a palindrome");
        break;
      } else if (j === numOfCheck + 1) console.log("Palindrome");
    }
  }
}

// /*
checkPali("rahhar");
/*
Output:
Palindrome
*/
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Exercise 12: Find Common Elements in Two Arrays
// Objective: Find common elements between two arrays.
// Instructions:
// Create two arrays with numbers.
// Use nested loops to find and print the common elements.
// Example Output:
// For arr1 = [1, 2, 3, 4] and arr2 = [3, 4, 5, 6], output: Common elements: 3, 4
//
// function commonElements(arr1, arr2) {
//   let commonElem = "";
//   for (let i = 0; i < arr1.length; i++) {
//     for (let j = 0; j < arr2.length; j++) {
//       if (arr1[i] === arr2[j]) {
//         commonElem += arr1[i].toString() + ", ";
//         break;
//       }
//     }
//   }
//   console.log(`Common elements: ${commonElem}`);
// }
// let array1 = [1, 2, 3, 4];
// let array2 = [3, 4, 5, 6];
// commonElements(array1, array2);
//
//

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Exercise 13: Check for Prime Numbers in a Range
//  Objective: Write a program to find all prime numbers in a given range.
// Instructions:
// Take a range (start and end) as input.
// Use nested loops to check each number in the range.
// Print the prime numbers found.
// Example Output:
// For range = (10, 20), output: Prime numbers: 11, 13, 17, 19
//
/*
function isPrime(num) {
  if (num <= 1) return false;
  if (num <= 3) return true;
  if (num % 2 === 0 || num % 3 === 0) return false;
  for (let i = 5; i * i <= num; i += 6) {
    if (num % i === 0 || num % (i + 2) === 0) return false;
  }
  return true;
}
function allPrimeNum(startNum, endNum) {
  let counter;
  for (let i = startNum; i <= endNum; i++) {
    if (isPrime(i)) {
      counter += i.toString() + ", ";
    }
  }
  console.log(`Prime numbers: ${counter}`);
}
allPrimeNum(1, 20);

/* Output:
Prime numbers: undefined2, 3, 5, 7, 11, 13, 17, 19, 

// */
//

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Exercise 14: Sort a 2D Array by Row Sum
// Objective: Sort the rows of a 2D array based on the sum of their elements.
// Instructions:
// Create a 2D array with numbers.
// Use nested loops to calculate the sum of each row.
// Sort the rows based on their sum and print the sorted array.
// Example Output:
// For arr = [[3, 1, 2], [1, 4, 5], [2, 3, 1]], output: [[2, 3, 1], [3, 1, 2], [1, 4, 5]]

/*
function sortArray(arr1) {
  let arraySum;
  for (let i = 0; i < arr1.length; i++) {
    arraySum += arr1[i];
  }}
}
*/
